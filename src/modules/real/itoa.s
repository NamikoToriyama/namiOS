itoa:
        ; ---------------------------------
        ; スタックフレームの構築
        ; ---------------------------------
                                            ; +12|フラグ
                                            ; +10|基数
                                            ; +8|バッファサイズ
                                            ; +6|バッファアドレス
                                            ; +4|数値
                                            ; +2|IP(戻り番地)
        push    bp                          ; BP+0|BP(元の値)
        mov     bp, sp         

        ; ---------------------------------
        ; レジスタの保存
        ; ---------------------------------
        push    ax
        push    bx
        push    cx
        push    dx
        push    si
        push    di

        ; ---------------------------------
        ; 引数の取得
        ; ---------------------------------
        mov     ax, [bp + 4]                ; val = 数値
        mov     si, [bp + 6]                ; dst = バッファアドレス
        mov     cx, [bp + 8]                ; size = 残りのバッファサイズ

        mov     di, si                      ; // バッファの最後尾
        add     di, cx                      ; dst = &dst[size - 1]
        dec     di                          ;

        mov     bx, word [bp + 12]          ; flags = オプション

        ; ---------------------------------
        ; 符号付き判定
        ; --------------------------------- 
        test    bx, 0b0001                  ; if(flags & 0x01) // 符号付き
.10Q:   je     .10E                         ;
        cmp     ax, 0                       ;   if (val < 0)
.12Q:   jge     .12E                        ;
        or      bx, 0b0010                  ;       flags |= 2; // 符号表示
.12E:
.10E:

        ; ---------------------------------
        ; 符号出力判定
        ; --------------------------------- 
        test    bx, 0b0010                  ; if(flags & 0x02) // 符号付き
.20Q:   je     .20E                         ;
        cmp     ax, 0                       ;   if (val < 0)
.22Q:   jge     .22F                        ;   else -> 22F
        neg     ax                          ;   val *= -1;
        mov     [si], byte '-'              ;   *dst = '-'
        jmp     .22E
.22F:
        mov     [si], byte '+'              ;   
.22E:
        dec     cx
.20E:

        ; ---------------------------------
        ; ASCII 変換
        ; --------------------------------- 
        mov     bx, [bp + 10]               ; BX = 基数;
.30L:
        mov     dx, 0
        div     bx

        mov     si, dx
        mov     dl, byte [.ascii + si]

        mov     [di], dl
        dec     di

        cmp     ax, 0
        loopnz  .30L
    
.30E:
        ; ---------------------------------
        ; 空欄を埋める
        ; --------------------------------- 
        cmp     cx, 0
.40Q:   je      .40E
        mov     al, ' '
        cmp     [bp + 12], word 0b0100
.42Q:   jne     .42E
        mov     al, '0'
.42E:
        std
        rep     stosb
.40E:

        ; ---------------------------------
        ; レジスタの復帰
        ; ---------------------------------
        pop    di
        pop    si
        pop    dx
        pop    cx
        pop    bx
        pop    ax

        ; ---------------------------------
        ; スタックフレームの破棄
        ; ---------------------------------
        mov     sp, bp
        pop     bp

        ret

.ascii  db      "0123456789ABCDEF"          ; 変換テーブル
